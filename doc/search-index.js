var searchIndex = new Map(JSON.parse('[\
["graph",{"t":"PPPPPGPPPFFGFFGPPGFFPFFFFPONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNONNOONNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONOONNNOOOONNNNONNNOOONOONNNNNNNNNNCNNOONOOONNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOH","n":["Backwards","Bicycle","Both","Car","Dir","Direction","Foot","Forwards","Geomedea","Graph","GtfsModel","GtfsSource","Intersection","IntersectionID","Mode","None","None","PathStep","Position","Road","Road","RoadID","Route","Router","Timer","Transit","access","allows_backwards","allows_forwards","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boundary_polygon","by_distance","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","closest_road","cmp","cmp","compare","compare","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","done","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dst_i","empty","end","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","find_edge","fmt","fmt","fmt","fmt","fmt","fmt","fraction_along","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_geomedea","from_usize","get_costs","get_inverted_boundary","gtfs","hash","hash","id","id","init","init","init","init","init","init","init","init","init","init","init","init","init","init","intersection","intersections","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_usize","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","length_meters","linestring","linestring","log","max_speed","mercator","new","new","new","node","node1","node2","osm_tags","parse","parse","partial_cmp","partial_cmp","point","pop","push","render_debug","road","roads","roads","route","router","routes","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","setup_gtfs","snap","snap_route","snap_to_road","src_i","start","step","steps","stops","stops","to_geomedea","to_gj","to_owned","to_owned","to_owned","to_owned","to_owned","transit_route_gj","trips","trips_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","way","forwards","road","stop1","stop2","trip","score_similarity"],"q":[[0,"graph"],[324,"graph::PathStep"],[329,"graph::snap"],[330,"alloc::vec"],[331,"graph::route"],[332,"core::cmp"],[333,"graph::gtfs"],[334,"core::result"],[335,"serde::de"],[336,"graph::timer"],[337,"core::option"],[338,"core::fmt"],[339,"utils::mercator"],[340,"anyhow"],[341,"chrono::naive::time"],[342,"core::time"],[343,"std::collections::hash::map"],[344,"alloc::string"],[345,"core::hash"],[346,"geo_types::geometry::line_string"],[347,"core::convert"],[348,"js_sys"],[349,"utils::osm2graph"],[350,"core::ops::function"],[351,"geojson::feature_collection"],[352,"serde::ser"],[353,"geo_types::geometry::coord"],[354,"geojson"],[355,"core::any"]],"i":[10,3,10,3,43,0,3,10,43,0,0,0,0,0,0,43,10,0,0,0,24,0,0,0,0,24,1,1,1,33,20,43,15,7,18,8,9,10,3,1,19,11,24,33,20,43,15,7,18,8,9,10,3,1,19,11,24,18,7,8,9,10,3,11,8,9,10,3,11,8,8,9,9,10,10,3,3,11,11,7,8,9,8,9,33,20,43,15,7,18,8,9,10,3,1,19,11,24,33,20,43,15,7,18,8,9,10,3,1,19,11,24,15,7,18,8,9,10,3,1,19,20,33,20,43,15,7,18,8,9,10,3,1,19,11,24,1,15,33,8,9,10,11,8,8,8,9,9,9,18,8,9,10,3,11,24,11,33,20,43,15,7,18,8,9,10,3,1,19,11,24,15,3,18,18,18,8,9,1,19,33,20,43,15,7,18,8,9,10,3,1,19,11,24,11,18,33,20,43,15,7,18,8,9,10,3,1,19,11,24,3,33,20,43,15,7,18,8,9,10,3,1,19,11,24,1,33,1,20,1,18,20,7,18,19,1,1,1,15,3,8,9,19,20,20,18,11,18,19,7,18,15,15,7,18,8,9,10,3,1,19,18,0,18,18,1,33,20,33,15,1,15,1,8,9,10,3,11,18,15,15,33,20,43,15,7,18,8,9,10,3,1,19,11,24,33,20,43,15,7,18,8,9,10,3,1,19,11,24,33,20,43,15,7,18,8,9,10,3,1,19,11,24,1,49,49,50,50,50,0],"f":"```````````````````````````{{{d{b}}f}h}0{{{d{c}}}{{d{e}}}{}{}}0000000000000{{{d{jc}}}{{d{je}}}{}{}}0000000000000`{{{d{{l{b}}}}}n}{{{d{A`}}}A`}{{{d{Ab}}}Ab}{{{d{Ad}}}Ad}{{{d{f}}}f}{{{d{Af}}}Af}{{{d{c}}{d{je}}}Ah{}{}}0000{{{d{c}}}Ah{}}000000000`{{{d{A`}}{d{A`}}}Aj}{{{d{Ab}}{d{Ab}}}Aj}{{{d{c}}{d{e}}}Aj{}{}}0{Al{{d{c}}}{}}0000000000000{Al{{d{jc}}}{}}0000000000000{c{{B`{An}}}Bb}{c{{B`{n}}}Bb}{c{{B`{Bd}}}Bb}{c{{B`{A`}}}Bb}{c{{B`{Ab}}}Bb}{c{{B`{Ad}}}Bb}{c{{B`{f}}}Bb}{c{{B`{b}}}Bb}{c{{B`{Bf}}}Bb}{BhAh}{AlAh}0000000000000`{{}An}`{{{d{A`}}{d{A`}}}h}{{{d{Ab}}{d{Ab}}}h}{{{d{Ad}}{d{Ad}}}h}{{{d{Af}}{d{Af}}}h}{{{d{c}}{d{e}}}h{}{}}00000{{{d{Bd}}AbAb}{{Bj{{d{b}}}}}}{{{d{A`}}{d{jBl}}}Bn}{{{d{Ab}}{d{jBl}}}Bn}{{{d{Ad}}{d{jBl}}}Bn}{{{d{f}}{d{jBl}}}Bn}{{{d{Af}}{d{jBl}}}Bn}{{{d{C`}}{d{jBl}}}Bn}`{cc{}}0000000000000{{{d{Cb}}{d{Cd}}}{{Cf{An}}}}{Alf}{{{d{Bd}}{l{Ab}}fhChCh}{{Cl{A`Cj}}}}{{{d{Bd}}}{{Cf{Cn}}}}`{{{d{A`}}{d{jc}}}AhD`}{{{d{Ab}}{d{jc}}}AhD`}``{{}Al}0000000000000``{ce{}{}}0000000000000{fAl}{{{d{c}}{d{e}}}h{}{}}0000000000000`{{{d{Db}}{d{Bd}}}Dd}`{{{d{Bh}}c}Ah{{Df{Cn}}}}``{{c{Bj{Dh}}}Bh{{Df{Cn}}}}{{{d{{l{b}}}}f}n}{{{d{{Dl{Dj}}}}{d{jc}}e{d{jBh}}}{{Cf{Bd}}}Dn{{E`{{d{j{l{b}}}}}}}}````{{{d{Cb}}{Bj{{d{Cd}}}}}{{Cf{An}}}}{{{d{Cb}}}{{Cf{f}}}}{{{d{A`}}{d{A`}}}{{Bj{Aj}}}}{{{d{Ab}}{d{Ab}}}{{Bj{Aj}}}}`{{{d{jBh}}}Ah}{{{d{jBh}}c}Ah{{Df{Cn}}}}{{{d{Bd}}}Eb}```{{{d{n}}{d{Bd}}AfAf}{{Cf{Db}}}}``{{{d{An}}c}B`Ed}{{{d{n}}c}B`Ed}{{{d{Bd}}c}B`Ed}{{{d{A`}}c}B`Ed}{{{d{Ab}}c}B`Ed}{{{d{Ad}}c}B`Ed}{{{d{f}}c}B`Ed}{{{d{b}}c}B`Ed}{{{d{Bf}}c}B`Ed}{{{d{jBd}}Ef{d{jBh}}}{{Cf{Ah}}}}`{{{d{Bd}}{d{Dd}}f}{{Cf{Db}}}}{{{d{Bd}}Ehf}Af}``>```{{{d{An}}{d{Cb}}}{{Cf{Ah}}}}{{{d{b}}{d{Cd}}}Ej}{{{d{c}}}e{}{}}0000{{{d{Bd}}AfAfhhChBh}{{Cf{Cn}}}}``{c{{B`{e}}}{}{}}000000000000000000000000000{{{d{c}}}El{}}0000000000000``````{{{d{Dd}}{d{Dd}}}{{Bj{{F`{EnEn}}}}}}","D":"Gl","p":[[5,"Road",0],[1,"reference"],[6,"Mode",0],[1,"bool"],[0,"mut"],[5,"Vec",330],[5,"Router",0,331],[5,"RoadID",0],[5,"IntersectionID",0],[6,"Direction",0],[5,"Position",0],[1,"unit"],[6,"Ordering",332],[1,"usize"],[5,"GtfsModel",0,333],[6,"Result",334],[10,"Deserializer",335],[5,"Graph",0],[5,"Intersection",0],[5,"Timer",0,336],[6,"Option",337],[5,"Formatter",338],[8,"Result",338],[6,"PathStep",0],[1,"str"],[5,"Mercator",339],[8,"Result",340],[5,"NaiveTime",341],[5,"Duration",342],[5,"HashMap",343],[5,"String",344],[10,"Hasher",345],[5,"Route",0,331],[5,"LineString",346],[10,"Into",347],[5,"Function",348],[1,"u8"],[1,"slice"],[10,"OsmReader",349],[10,"FnOnce",350],[5,"FeatureCollection",351],[10,"Serializer",352],[6,"GtfsSource",0],[5,"Coord",353],[5,"Feature",354],[5,"TypeId",355],[1,"f64"],[1,"tuple"],[15,"Road",324],[15,"Transit",324]],"r":[[10,333],[22,331],[23,331],[24,336]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAAwBGAAAAAUABwACAAsAAQAOAAAAEAABABUAAQAZAAEAHgAbADwAWQCXAAYArAABALAAFADTAA8A5AABAOgAAADrAAMA8QACAPcAAgD7AAoABwEAAAoBAQANAQEAEAEIABoBMAA="}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
