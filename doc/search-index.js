var searchIndex = new Map(JSON.parse('[\
["graph",{"t":"PPPGPPFFGFFPPGFFFPFFFFPONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNONNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNONNNOONNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNONONONNNOOOONNNNONONNOOONOONNNNNNNNNCNNOONOOONNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOH","n":["Backwards","Both","Dir","Direction","Forwards","Geomedea","Graph","GtfsModel","GtfsSource","Intersection","IntersectionID","None","None","PathStep","Position","ProfileID","Road","Road","RoadID","Route","Router","Timer","Transit","access","allows_backwards","allows_forwards","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boundary_polygon","by_distance","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","closest_road","cmp","cmp","cmp","compare","compare","compare","cost","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","done","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dst_i","empty","end","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","find_edge","fmt","fmt","fmt","fmt","fmt","fmt","fraction_along","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_costs","get_inverted_boundary","gtfs","hash","hash","hash","id","id","init","init","init","init","init","init","init","init","init","init","init","init","init","init","intersection","intersections","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","length_meters","linestring","linestring","log","mercator","new","new","new","node","node1","node2","osm_tags","parse","partial_cmp","partial_cmp","partial_cmp","point","pop","profile_names","push","render_debug","road","roads","roads","route","routers","routes","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","snap","snap_route","snap_to_road","src_i","start","step","steps","stops","stops","to_gj","to_owned","to_owned","to_owned","to_owned","to_owned","transit_route_gj","trips","trips_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","walking_profile_for_transit","way","forwards","road","stop1","stop2","trip","score_similarity"],"q":[[0,"graph"],[328,"graph::PathStep"],[333,"graph::snap"],[334,"alloc::vec"],[335,"graph::route"],[336,"core::cmp"],[337,"graph::gtfs"],[338,"core::result"],[339,"serde::de"],[340,"graph::timer"],[341,"core::option"],[342,"core::fmt"],[343,"chrono::naive::time"],[344,"core::time"],[345,"std::collections::hash::map"],[346,"alloc::string"],[347,"anyhow"],[348,"core::hash"],[349,"geo_types::geometry::line_string"],[350,"core::convert"],[351,"js_sys"],[352,"core::ops::function"],[353,"alloc::boxed"],[354,"utils::osm2graph"],[355,"utils::mercator"],[356,"geojson::feature_collection"],[357,"serde::ser"],[358,"geo_types::geometry::coord"],[359,"geojson"],[360,"core::any"]],"i":[10,10,49,0,10,49,0,0,0,0,0,49,10,0,0,0,0,24,0,0,0,0,24,1,1,1,31,20,49,15,7,18,8,9,3,10,1,19,11,24,31,20,49,15,7,18,8,9,3,10,1,19,11,24,18,7,8,9,3,10,11,8,9,3,10,11,8,8,9,9,3,3,10,10,11,11,7,8,9,3,8,9,3,1,31,20,49,15,7,18,8,9,3,10,1,19,11,24,31,20,49,15,7,18,8,9,3,10,1,19,11,24,15,7,18,8,9,3,10,1,19,20,31,20,49,15,7,18,8,9,3,10,1,19,11,24,1,15,31,8,9,3,10,11,8,8,8,8,9,9,9,9,3,3,3,3,18,8,9,3,10,11,24,11,31,20,49,15,7,18,8,9,3,10,1,19,11,24,18,18,18,8,9,3,1,19,31,20,49,15,7,18,8,9,3,10,1,19,11,24,11,18,31,20,49,15,7,18,8,9,3,10,1,19,11,24,31,20,49,15,7,18,8,9,3,10,1,19,11,24,1,31,1,20,18,20,7,18,19,1,1,1,15,8,9,3,19,20,18,20,18,11,18,19,7,18,15,15,7,18,8,9,3,10,1,19,0,18,18,1,31,20,31,15,1,1,8,9,3,10,11,18,15,15,31,20,49,15,7,18,8,9,3,10,1,19,11,24,31,20,49,15,7,18,8,9,3,10,1,19,11,24,31,20,49,15,7,18,8,9,3,10,1,19,11,24,18,1,50,50,51,51,51,0],"f":"````````````````````````{{{d{b}}f}h}0{{{d{c}}}{{d{e}}}{}{}}0000000000000{{{d{jc}}}{{d{je}}}{}{}}0000000000000`{{{d{{l{b}}}}}n}{{{d{A`}}}A`}{{{d{Ab}}}Ab}{{{d{f}}}f}{{{d{Ad}}}Ad}{{{d{Af}}}Af}{{{d{c}}{d{je}}}Ah{}{}}0000{{{d{c}}}Ah{}}000000000`{{{d{A`}}{d{A`}}}Aj}{{{d{Ab}}{d{Ab}}}Aj}{{{d{f}}{d{f}}}Aj}{{{d{c}}{d{e}}}Aj{}{}}00`{Al{{d{c}}}{}}0000000000000{Al{{d{jc}}}{}}0000000000000{c{{B`{An}}}Bb}{c{{B`{n}}}Bb}{c{{B`{Bd}}}Bb}{c{{B`{A`}}}Bb}{c{{B`{Ab}}}Bb}{c{{B`{f}}}Bb}{c{{B`{Ad}}}Bb}{c{{B`{b}}}Bb}{c{{B`{Bf}}}Bb}{BhAh}{AlAh}0000000000000`{{}An}`{{{d{A`}}{d{A`}}}h}{{{d{Ab}}{d{Ab}}}h}{{{d{f}}{d{f}}}h}{{{d{Ad}}{d{Ad}}}h}{{{d{Af}}{d{Af}}}h}{{{d{c}}{d{e}}}h{}{}}00000000000{{{d{Bd}}AbAb}{{Bj{{d{b}}}}}}{{{d{A`}}{d{jBl}}}Bn}{{{d{Ab}}{d{jBl}}}Bn}{{{d{f}}{d{jBl}}}Bn}{{{d{Ad}}{d{jBl}}}Bn}{{{d{Af}}{d{jBl}}}Bn}{{{d{C`}}{d{jBl}}}Bn}`{cc{}}0000000000000{{{d{Bd}}{l{Ab}}fhCbCb}{{Cf{A`Cd}}}}{{{d{Bd}}}{{Cj{Ch}}}}`{{{d{A`}}{d{jc}}}AhCl}{{{d{Ab}}{d{jc}}}AhCl}{{{d{f}}{d{jc}}}AhCl}``{{}Al}0000000000000``{ce{}{}}0000000000000??????????????`{{{d{Cn}}{d{Bd}}}D`}`{{{d{Bh}}c}Ah{{Db{Ch}}}}`{{c{Bj{Dd}}}Bh{{Db{Ch}}}}{{{d{{l{b}}}}f}n}{{{d{{Dh{Df}}}}{d{jc}}{l{{Dn{Ch{Dl{Dj}}}}}}{d{jBh}}}{{Cj{Bd}}}E`}````{{{d{Eb}}{Bj{{d{Ed}}}}}{{Cj{An}}}}{{{d{A`}}{d{A`}}}{{Bj{Aj}}}}{{{d{Ab}}{d{Ab}}}{{Bj{Aj}}}}{{{d{f}}{d{f}}}{{Bj{Aj}}}}`{{{d{jBh}}}Ah}`{{{d{jBh}}c}Ah{{Db{Ch}}}}{{{d{Bd}}}Ef}```{{{d{n}}{d{Bd}}AfAf}{{Cj{Cn}}}}``{{{d{An}}c}B`Eh}{{{d{n}}c}B`Eh}{{{d{Bd}}c}B`Eh}{{{d{A`}}c}B`Eh}{{{d{Ab}}c}B`Eh}{{{d{f}}c}B`Eh}{{{d{Ad}}c}B`Eh}{{{d{b}}c}B`Eh}{{{d{Bf}}c}B`Eh}`{{{d{Bd}}{d{D`}}f}{{Cj{Cn}}}}{{{d{Bd}}Ejf}Af}``=```{{{d{b}}{d{Bd}}}El}{{{d{c}}}e{}{}}0000{{{d{Bd}}AfAfhhCbBh}{{Cj{Ch}}}}``{c{{B`{e}}}{}{}}000000000000000000000000000{{{d{c}}}En{}}0000000000000```````{{{d{D`}}{d{D`}}}{{Bj{{Dn{F`F`}}}}}}","D":"Gh","p":[[5,"Road",0],[1,"reference"],[5,"ProfileID",0],[1,"bool"],[0,"mut"],[5,"Vec",334],[5,"Router",0,335],[5,"RoadID",0],[5,"IntersectionID",0],[6,"Direction",0],[5,"Position",0],[1,"unit"],[6,"Ordering",336],[1,"usize"],[5,"GtfsModel",0,337],[6,"Result",338],[10,"Deserializer",339],[5,"Graph",0],[5,"Intersection",0],[5,"Timer",0,340],[6,"Option",341],[5,"Formatter",342],[8,"Result",342],[6,"PathStep",0],[5,"NaiveTime",343],[5,"Duration",344],[5,"HashMap",345],[5,"String",346],[8,"Result",347],[10,"Hasher",348],[5,"Route",0,335],[5,"LineString",349],[10,"Into",350],[5,"Function",351],[1,"u8"],[1,"slice"],[10,"Fn",352],[5,"Box",353],[1,"tuple"],[10,"OsmReader",354],[1,"str"],[5,"Mercator",355],[5,"FeatureCollection",356],[10,"Serializer",357],[5,"Coord",358],[5,"Feature",359],[5,"TypeId",360],[1,"f64"],[6,"GtfsSource",0],[15,"Road",328],[15,"Transit",328]],"r":[[7,337],[19,335],[20,335],[21,340]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABIBGAAAAAMABQABAAgAAQALAAIAEAAAABIAAQAWAAEAGwAbADkAGgBVAEcAngAGALUAFQDZAA4A6QABAOwAAADvAAMA9AADAPkAAAD8AAIAAQEKAA4BAQARAQEAFAEHAB0BMQA="}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
