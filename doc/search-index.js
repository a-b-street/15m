var searchIndex = new Map(JSON.parse('[\
["graph",{"t":"PPPGPPFFGFFPPGFFFPFFFFPONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNONNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNONNNOONNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNONONONNNOOOONNNNONONNOOONOONNNNNNNNNCNNOONOOONNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOH","n":["Backwards","Both","Dir","Direction","Forwards","Geomedea","Graph","GtfsModel","GtfsSource","Intersection","IntersectionID","None","None","PathStep","Position","ProfileID","Road","Road","RoadID","Route","Router","Timer","Transit","access","add_profile","allows_backwards","allows_forwards","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boundary_polygon","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","clone_to_uninit","closest_road","cmp","cmp","cmp","compare","compare","compare","cost","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","done","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dst_i","empty","end","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","find_edge","fmt","fmt","fmt","fmt","fmt","fmt","fraction_along","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_costs","get_inverted_boundary","gtfs","hash","hash","hash","id","id","init","init","init","init","init","init","init","init","init","init","init","init","init","init","intersection","intersections","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","length_meters","linestring","linestring","log","mercator","new","new","new","node","node1","node2","osm_tags","parse","partial_cmp","partial_cmp","partial_cmp","point","pop","profile_names","push","render_debug","road","roads","roads","route","routers","routes","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","snap","snap_route","snap_to_road","src_i","start","step","steps","stops","stops","to_gj","to_owned","to_owned","to_owned","to_owned","to_owned","transit_route_gj","trips","trips_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_costs","walking_profile_for_transit","way","forwards","road","stop1","stop2","trip","score_similarity"],"q":[[0,"graph"],[329,"graph::PathStep"],[334,"graph::snap"],[335,"alloc::string"],[336,"core::ops::function"],[337,"alloc::boxed"],[338,"core::cmp"],[339,"graph::gtfs"],[340,"core::result"],[341,"serde::de"],[342,"graph::route"],[343,"graph::timer"],[344,"core::option"],[345,"core::fmt"],[346,"alloc::vec"],[347,"chrono::naive::time"],[348,"core::time"],[349,"std::collections::hash::map"],[350,"anyhow"],[351,"core::hash"],[352,"geo_types::geometry::line_string"],[353,"core::convert"],[354,"js_sys"],[355,"utils::osm2graph"],[356,"utils::mercator"],[357,"geojson::feature_collection"],[358,"serde::ser"],[359,"geo_types::geometry::coord"],[360,"geojson"],[361,"core::any"]],"i":[12,12,49,0,12,49,0,0,0,0,0,49,12,0,0,0,0,26,0,0,0,0,26,8,2,8,8,33,22,49,17,20,2,10,11,7,12,8,21,13,26,33,22,49,17,20,2,10,11,7,12,8,21,13,26,2,10,11,7,12,13,10,11,7,12,13,10,10,11,11,7,7,12,12,13,13,20,10,11,7,10,11,7,8,33,22,49,17,20,2,10,11,7,12,8,21,13,26,33,22,49,17,20,2,10,11,7,12,8,21,13,26,17,20,2,10,11,7,12,8,21,22,33,22,49,17,20,2,10,11,7,12,8,21,13,26,8,17,33,10,11,7,12,13,10,10,10,10,11,11,11,11,7,7,7,7,2,10,11,7,12,13,26,13,33,22,49,17,20,2,10,11,7,12,8,21,13,26,2,2,2,10,11,7,8,21,33,22,49,17,20,2,10,11,7,12,8,21,13,26,13,2,33,22,49,17,20,2,10,11,7,12,8,21,13,26,33,22,49,17,20,2,10,11,7,12,8,21,13,26,8,33,8,22,2,22,20,2,21,8,8,8,17,10,11,7,21,22,2,22,2,13,2,21,20,2,17,17,20,2,10,11,7,12,8,21,0,2,2,8,33,22,33,17,8,8,10,11,7,12,13,2,17,17,33,22,49,17,20,2,10,11,7,12,8,21,13,26,33,22,49,17,20,2,10,11,7,12,8,21,13,26,33,22,49,17,20,2,10,11,7,12,8,21,13,26,20,2,8,50,50,51,51,51,0],"f":"````````````````````````{{{f{bd}}h{l{j}}}n}{{{f{A`}}n}Ab}0{{{f{c}}}{{f{e}}}{}{}}0000000000000{{{f{bc}}}{{f{be}}}{}{}}0000000000000`{{{f{Ad}}}Ad}{{{f{Af}}}Af}{{{f{n}}}n}{{{f{Ah}}}Ah}{{{f{Aj}}}Aj}{{{f{c}}{f{be}}}Al{}{}}0000{{{f{c}}}Al{}}000000000`{{{f{Ad}}{f{Ad}}}An}{{{f{Af}}{f{Af}}}An}{{{f{n}}{f{n}}}An}{{{f{c}}{f{e}}}An{}{}}00`{B`{{f{c}}}{}}0000000000000{B`{{f{bc}}}{}}0000000000000{c{{Bd{Bb}}}Bf}{c{{Bd{Bh}}}Bf}{c{{Bd{d}}}Bf}{c{{Bd{Ad}}}Bf}{c{{Bd{Af}}}Bf}{c{{Bd{n}}}Bf}{c{{Bd{Ah}}}Bf}{c{{Bd{A`}}}Bf}{c{{Bd{Bj}}}Bf}{BlAl}{B`Al}0000000000000`{{}Bb}`{{{f{Ad}}{f{Ad}}}Ab}{{{f{Af}}{f{Af}}}Ab}{{{f{n}}{f{n}}}Ab}{{{f{Ah}}{f{Ah}}}Ab}{{{f{Aj}}{f{Aj}}}Ab}{{{f{c}}{f{e}}}Ab{}{}}00000000000{{{f{d}}AfAf}{{Bn{{f{A`}}}}}}{{{f{Ad}}{f{bC`}}}Cb}{{{f{Af}}{f{bC`}}}Cb}{{{f{n}}{f{bC`}}}Cb}{{{f{Ah}}{f{bC`}}}Cb}{{{f{Aj}}{f{bC`}}}Cb}{{{f{Cd}}{f{bC`}}}Cb}`{cc{}}0000000000000{{{f{d}}{Cf{Af}}nAbChCh}{{Cl{AdCj}}}}{{{f{d}}}{{Cn{h}}}}`{{{f{Ad}}{f{bc}}}AlD`}{{{f{Af}}{f{bc}}}AlD`}{{{f{n}}{f{bc}}}AlD`}``{{}B`}0000000000000``{ce{}{}}0000000000000??????????????`{{{f{Db}}{f{d}}}Dd}`{{{f{Bl}}c}Al{{Df{h}}}}`{{c{Bn{Dh}}}Bl{{Df{h}}}}{{{f{{Cf{A`}}}}n}Bh}{{{f{{Dl{Dj}}}}{f{bc}}{Cf{{Dn{h{l{j}}}}}}{f{bBl}}}{{Cn{d}}}E`}````{{{f{Eb}}{Bn{{f{Ed}}}}}{{Cn{Bb}}}}{{{f{Ad}}{f{Ad}}}{{Bn{An}}}}{{{f{Af}}{f{Af}}}{{Bn{An}}}}{{{f{n}}{f{n}}}{{Bn{An}}}}`{{{f{bBl}}}Al}`{{{f{bBl}}c}Al{{Df{h}}}}{{{f{d}}}Ef}```{{{f{Bh}}{f{d}}AjAj}{{Cn{Db}}}}``{{{f{Bb}}c}BdEh}{{{f{Bh}}c}BdEh}{{{f{d}}c}BdEh}{{{f{Ad}}c}BdEh}{{{f{Af}}c}BdEh}{{{f{n}}c}BdEh}{{{f{Ah}}c}BdEh}{{{f{A`}}c}BdEh}{{{f{Bj}}c}BdEh}`{{{f{d}}{f{Dd}}n}{{Cn{Db}}}}{{{f{d}}Ejn}Aj}``=```{{{f{A`}}{f{d}}}El}{{{f{c}}}e{}{}}0000{{{f{d}}AjAjAbAbChBl}{{Cn{h}}}}``{c{{Bd{e}}}{}{}}000000000000000000000000000{{{f{c}}}En{}}0000000000000{{{f{bBh}}{f{{Cf{A`}}}}n}Al}```````{{{f{Dd}}{f{Dd}}}{{Bn{{Dn{F`F`}}}}}}","D":"Gh","p":[[0,"mut"],[5,"Graph",0],[1,"reference"],[5,"String",335],[10,"Fn",336],[5,"Box",337],[5,"ProfileID",0],[5,"Road",0],[1,"bool"],[5,"RoadID",0],[5,"IntersectionID",0],[6,"Direction",0],[5,"Position",0],[1,"unit"],[6,"Ordering",338],[1,"usize"],[5,"GtfsModel",0,339],[6,"Result",340],[10,"Deserializer",341],[5,"Router",0,342],[5,"Intersection",0],[5,"Timer",0,343],[6,"Option",344],[5,"Formatter",345],[8,"Result",345],[6,"PathStep",0],[5,"Vec",346],[5,"NaiveTime",347],[5,"Duration",348],[5,"HashMap",349],[8,"Result",350],[10,"Hasher",351],[5,"Route",0,342],[5,"LineString",352],[10,"Into",353],[5,"Function",354],[1,"u8"],[1,"slice"],[1,"tuple"],[10,"OsmReader",355],[1,"str"],[5,"Mercator",356],[5,"FeatureCollection",357],[10,"Serializer",358],[5,"Coord",359],[5,"Feature",360],[5,"TypeId",361],[1,"f64"],[6,"GtfsSource",0],[15,"Road",329],[15,"Transit",329]],"r":[[7,339],[19,342],[20,342],[21,343]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABMBGgAAAAMABQABAAgAAQALAAIAEAAAABIAAQAWAAEAGQAAABwAGwA5ABoAVQBHAJ4ABgC1ABUA2QAOAOkAAQDsAAAA7wADAPQAAwD5AAAA/AACAAEBCgAOAQEAEQEBABQBBwAdASkASAEHAA=="}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
